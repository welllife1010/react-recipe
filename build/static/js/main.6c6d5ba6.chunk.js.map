{"version":3,"sources":["Counter.jsx","CounterHooks.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","state","count","initialCount","console","log","ThemeContext","Consumer","style","onClick","changeCount","amount","this","setState","prevState","Component","CounterHooks","useState","setCount","theme","useContext","prevCount","React","createContext","App","setTheme","Provider","value","backgroundColor","prevTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sMAGqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAOF,EAAMG,cAJF,E,0CAQnB,WAAU,IAAD,OAEL,OADAC,QAAQC,IAAI,kBAER,cAACC,EAAaC,SAAd,UACK,SAAAC,GAAK,OACF,gCACI,wBAAQA,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,aAAa,IAAvD,eACA,+BAAO,EAAKT,MAAMC,QAClB,wBAAQO,QAAS,kBAAM,EAAKC,YAAY,IAAxC,uB,yBAQpB,SAAYC,GACRC,KAAKC,UAAS,SAAAC,GACV,MAAO,CAAEZ,MAAOY,EAAUZ,MAAQS,U,GA3BTI,aCAtB,SAASC,EAAT,GAAyC,IAAjBb,EAAgB,EAAhBA,aACnCC,QAAQC,IAAI,uBADuC,MAEzBY,mBAASd,GAFgB,mBAE5CD,EAF4C,KAErCgB,EAFqC,KAG7CC,EAAQC,qBAAWd,GACzB,OACI,gCACI,wBAAQE,MAAOW,EAAOV,QAAS,kBAAMS,GAAS,SAAAG,GAAS,OAAIA,EAAY,MAAvE,eACA,+BAAOnB,IACP,wBAAQO,QAAS,kBAAMS,GAAS,SAAAG,GAAS,OAAIA,EAAY,MAAzD,kBCPL,IAAMf,EAAegB,IAAMC,gBAkBnBC,MAhBf,WACEpB,QAAQC,IAAI,cADC,MAEaY,mBAAS,OAFtB,mBAENE,EAFM,KAECM,EAFD,KAGb,OACE,eAACnB,EAAaoB,SAAd,CAAuBC,MAAO,CAAEC,gBAAiBT,GAAjD,oBAEE,cAAC,EAAD,CAAShB,aAAc,IAFzB,eAIE,cAACa,EAAD,CAAcb,aAAc,IAC5B,wBAAQM,QAAS,kBAAMgB,GAAS,SAAAI,GAAS,MACzB,QAAdA,EAAsB,OAAS,UADjC,8BCHSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6c6d5ba6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { ThemeContext } from './App'\n\nexport default class Counter extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            count: props.initialCount\n        }\n    }\n\n    render() {\n        console.log(\"Render Counter\")\n        return (\n            <ThemeContext.Consumer>\n                {style => (\n                    <div>\n                        <button style={style} onClick={() => this.changeCount(-1)}>-</button>\n                        <span>{this.state.count}</span>\n                        <button onClick={() => this.changeCount(1)}>+</button>\n                    </div>\n                )} \n            </ThemeContext.Consumer>\n            \n        )\n    }\n\n    changeCount(amount) {\n        this.setState(prevState => { \n            return { count: prevState.count + amount }\n        })\n    }\n}","import React, { useState, useContext } from 'react'\nimport { ThemeContext } from './App'\n\nexport default function CounterHooks({ initialCount }) {\n    console.log(\"Render CounterHooks\")\n    const [count, setCount] = useState(initialCount)\n    const theme = useContext(ThemeContext)\n    return (\n        <div>\n            <button style={theme} onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\n            <span>{count}</span>\n            <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport Counter from './Counter'\nimport CounterHooks from './CounterHooks'\n\nexport const ThemeContext = React.createContext()\n\nfunction App() {\n  console.log(\"Render App\")\n  const [theme, setTheme] = useState('red')\n  return (\n    <ThemeContext.Provider value={{ backgroundColor: theme }}>\n      Counter\n      <Counter initialCount={0} />\n      CounterHooks\n      <CounterHooks initialCount={0} />\n      <button onClick={() => setTheme(prevTheme => \n        prevTheme === 'red' ? 'blue' : 'red'\n      )}>Toggle Theme</button>\n    </ThemeContext.Provider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}